<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="application_creationCompleteHandler(event)">
	
	<s:Group id="canvas" height="100%" width="100%"/>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.dbraillon.Map;
			
			import mx.events.FlexEvent;

			private var _timer:Timer;
			private var _map:Map;
			
			private var _squareSize:Number;
			
			protected function application_creationCompleteHandler(event:FlexEvent):void
			{
				_timer = new Timer(10);
				_timer.addEventListener(TimerEvent.TIMER, timer_tickHandler);
				_timer.start();
				
				applicationInitialize();
			}
			
			protected function timer_tickHandler(event:TimerEvent):void
			{
				applicationUpdate();
				applicationRender();
			}
			
			private function applicationInitialize():void
			{
				_map = new Map();
			}
			
			private function applicationUpdate():void
			{
				if(canvas.height / (_map.HEIGHT * .25 + .25) > canvas.width / (_map.WIDTH + .5))
				{
					_squareSize = canvas.width / (_map.WIDTH + .5);
					_map.restX = 0;
					_map.restY = (canvas.height - _squareSize * (_map.HEIGHT * .25 + .25)) * .5; 
				}
				else
				{
					_squareSize = canvas.height / (_map.HEIGHT * .25 + .25);
					_map.restX = (canvas.width - _squareSize * (_map.WIDTH + .5)) * .5;
					_map.restY = 0;
				}
			}
			
			private function applicationRender():void
			{
				canvas.graphics.clear();
				
				for(var j:int = 0; j < _map.HEIGHT; j++)
				{
					for(var i:int = 0; i < _map.WIDTH; i++)
					{
						//canvas.graphics.lineStyle(0, 0, .5);
						
						if(j % 2 == 0)
						{
							canvas.graphics.beginFill(0xFF0000, 1.0);
							
							canvas.graphics.moveTo(_squareSize * i + _map.restX + _squareSize * .5	, _squareSize * .25 * j + _map.restY);
							canvas.graphics.lineTo(_squareSize * i + _map.restX + _squareSize * .5	, _squareSize * .25 * j + _map.restY);
							canvas.graphics.lineTo(_squareSize * i + _map.restX + _squareSize		, _squareSize * .25 * j + _map.restY + _squareSize * .5 * .5);
							canvas.graphics.lineTo(_squareSize * i + _map.restX + _squareSize * .5	, _squareSize * .25 * j + _map.restY + _squareSize * .5);
							canvas.graphics.lineTo(_squareSize * i + _map.restX						, _squareSize * .25 * j + _map.restY + _squareSize * .5 * .5);
						}
						else
						{
							canvas.graphics.beginFill(0x0000FF, 1.0);
							
							canvas.graphics.moveTo(_squareSize * i + _map.restX + _squareSize		, _squareSize * .25 * j + _map.restY);
							canvas.graphics.lineTo(_squareSize * i + _map.restX + _squareSize		, _squareSize * .25 * j + _map.restY);
							canvas.graphics.lineTo(_squareSize * i + _map.restX + _squareSize * 1.5	, _squareSize * .25 * j + _map.restY + _squareSize * .5 * .5);
							canvas.graphics.lineTo(_squareSize * i + _map.restX + _squareSize		, _squareSize * .25 * j + _map.restY + _squareSize * .5);
							canvas.graphics.lineTo(_squareSize * i + _map.restX + _squareSize * .5	, _squareSize * .25 * j + _map.restY + _squareSize * .5 * .5);
						}
						
						canvas.graphics.endFill();
					}
				}
			}
			
		]]>
	</fx:Script>
	
</s:WindowedApplication>
